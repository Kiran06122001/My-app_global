version: '3.8'

services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: ${ENVIRONMENT:-development}
    ports:
      - "80:80"
    depends_on:
      - express-app
      - react-app
    networks:
      - app-network

  express-app:
    build:
      context: ./server
      dockerfile: Dockerfile
    depends_on:
      mysql-db:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - MYSQL_HOST=mysql-db
      - MYSQL_USER=${MYSQL_USER:-user}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-password}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-mydb}
    networks:
      - app-network
    volumes:
      - ./server:/app
      - /app/node_modules

  react-app:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    networks:
      - app-network
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REACT_APP_API_URL=http://localhost/api
    volumes:
      - ./frontend:/app
      - /app/node_modules

  mysql-db:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-rootpassword}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-mydb}
      - MYSQL_USER=${MYSQL_USER:-user}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-password}
    volumes:
      - mysql-data:/var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  mysql-data: